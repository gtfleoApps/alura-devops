/* Minikube */

Documentação kubernetes (cheatsheets):
https://kubernetes.io/pt-br/docs/reference/kubectl/cheatsheet/

Documentação minikube (cluster local kubernetes):
https://minikube.sigs.k8s.io/docs/start/

Utilizando Minikube para acessar Apps:
https://minikube.sigs.k8s.io/docs/handbook/accessing/

WSL2: Cannot access kubernetes services #9765
https://github.com/kubernetes/minikube/issues/9765

Inicialize o Docker:
> sudo service docker start

Inicializando o cluster:
> minikube start

Com erro de inicialização? Tente:
> minikube delete
> minikube start --driver=docker

Caso nao consiga o acesso usando o INTERNAL-IP ou localhost (por conta do WSL2), execute o comando:
> minikube service nomeDoService

Para subir todos os services:
> minikube service --all




/* k8s */

Comandos que criam, descrevem e editam pods, respectivamente:
> kubectl run pod nomeDoPod
> kubectl describe pod nomeDoPod
> kubectl edit pod nomeDoPod
> kubectl delete pod nomeDoPod
> kubectl delete pods --all

Visualizando os pods:
> kubectl get pods
> kubectl get pods --watch
> kubectl get pods -o wide

Executando arquivo com a definição para criação de pod, na pasta do projeto:
> kubectl apply -f ./primeiro-pod.yaml

Excluindo pod do arquivo
> kubectl delete -f ./primeiro-pod.yaml

Abrindo um terminal dentro do Pod:
> kubectl exec -it portal-noticias -- bash

Executando Mysql de um Pod:
> kubectl exec -it db-noticias -- mysql -u root -p

Executando arquivo para criação de service (SVC):
> kubectl apply -f ./svc-pod-2.yaml

Visualizando os services:
> kubectl get svc 

Excluindo os services:
> kubectl delete svc --all

Visualizando o IP do node (minikube), para acesso externo ao Cluster-IP:
> kubectl get nodes -o wide

Visualizando ConfigMap:
> kubectl get configmap

Descrevendo ConfigMap:
> kubectl describe configmap nomeDoConfigMap

Para saber mais: NodePort e IP's:
https://kubernetes.io/docs/concepts/services-networking/service/#nodeport




/* K8S - ReplicaSet */

Criando o ReplicaSet:
> kubectl apply -f ./portal-noticias-replicaset.yaml

Visualizando replicasets (rs):
> kubectl get replicasets

Visualizando o que acontece com os pods do replicaset:
> kubectl get rs --watch




/* K8S - Deployment (ReplicaSet com uma camada que permite versionamento de imagens e pods) */

Criando o Deployment:
> kubectl apply -f ./nginx-deployment.yaml

Visualizando deployments:
> kubectl get deployments

Visualizando historico de mudanças:
> kubectl rollout history deployment nginx-deployment

Após alteração da versão do container, executando o comando abaixo, tem-se pods atualizados, com as novas versões:
> kubectl apply -f ./nginx-deployment.yaml --record

Gravando mensagem para o historico de mudanças:
> kubectl annotate deployment nginx-deployment kubernetes.io/change-cause="Definindo a imagem com versão latest"

Fazendo rollback de versões:
> kubectl rollout undo deployment <nome do deployment> --to-revision=<versao do comando history a ser retornada>

Deletando deployment e seus pods criados:
> kubectl delete deployment nginx-deployment
> kubectl delete -f ./nginx-deployment.yaml




/* K8S - Volumes: ciclos de vida independentes dos containers, mas dependentes dos pods;
         Porém, mesmo com o fim do pod e do volume, os arquivos permanecem em disco. */

Executando bash em um container especifico de um pod:
> kubectl exec -it pod-volume --container nginx-container -- bash

Usando o Minikube, no Linux, o mapeamento de volume necessita da criacao do diretorio na maquina virtual:
> minikube ssh
> sudo mkdir primeiro-volume
> cd primeiro-volume
> pwd (copie esse path)
> exit

ou, caso não queira criar o diretorio na mão, deve-se incluir o OrCreate ao type (no .yaml):
  volumes:
    - name: primeiro-volume
      hostPath: 
        path: /home/docker/primeiro-volume
        type: DirectoryOrCreate




/* K8S - Persistent Volumes */
https://kubernetes.io/docs/concepts/storage/persistent-volumes/




/* K8S - Storage Classes */
Permitem criar volumes, disco e persistence volumes, dinamicamente.

> kubectl apply -f ./sc.yaml
> kubectl get sc
> kubectl apply -f ./pvc-sc.yaml
> kubectl apply -f ./pod-sc.yaml




/* K8S - Stateful Set */
Conteudo do Pod não é perdido ao ser iniciado. Diferentemente
do Deployment, onde o conteúdo é perdido.

> kubectl get deployments
> kubectl delete deployments sistema-noticias-deployment

> kubectl apply -f ./imagens-pvc.yaml
> kubectl apply -f ./sessao-pvc.yaml
> kubectl apply -f ./sistema-noticias-statefulset.yaml




/* K8S - Probes */
https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/

Apesar do Pod estar saudável, nossa aplicação dentro do
container pode não responder como esperado. 
 
 - Liveness Probe: Prova de vida de que a aplicação dentro
 de um container de um Pod está funcionando.
 Ele indicará falha caso o código de retorno seja 
 menor que 200 ou maior/igual a 400.

 - Readiness Probe: O container dentro do Pod pode
 ainda não estar 100% para receber requisições.

 - Startup Probe: Voltado para aplicações legadas, 
 porque tendem a exigir tempo adicional para inicializar na primeira vez. 
 Nem sempre Liveness ou Readiness Probes vão conseguir resolver de maneira 
 simples os problemas  de inicialização de aplicações legadas.




 /* K8S - Horizontal Pod Autoscaler */

> kubectl apply -f ./portal-noticias-deployment.yaml
> kubectl apply -f ./portal-noticias-hpa.yaml
> kubectl get hpa
> kubectl describe hpa portal-noticias-hpa
> kubectl get hpa --watch

- No Windows:
Caso encontre-se erro para leitura do consumo de CPU, ajustar components.yaml e executar:
> kubectl apply -f ./components.yaml

Para simular a escalabilidade, use o script stress-windows.ssh (a cada 0.001 seg, gravando no arquivo out.txt):
> bash stress-windows.ssh 0.001 > out.txt

- No Linux:
Caso encontre-se erro para leitura do consumo de CPU:
> minikube addons list
> minikube addons enable metrics-server

Altere o arquivo stress.sh, incluindo o IP do Nó (node):
> kubectl get nodes -o wide 
(copie o INTERNAL-IP e substitua, no arquivo stress.sh, o localhost por esse IP)

Para simular a escalabilidade, use o script stress-linux.ssh (a cada 0.001 seg, gravando no arquivo out.txt):
> bash stress-linux.ssh 0.001 > out.txt




/* K8S - Jobs */
Executa uma ação e, logo após conclusão, não reinicia o pod.

https://kubernetes.io/docs/concepts/workloads/controllers/job/

> kubectl apply -f ./job.yaml
> kubectl get pods --watch
> kubectl get jobs
> kubectl describe job pi-job




/* K8S - HELM */
Gerenciador de pacotes para cluster K8S. 

https://helm.sh/docs/


Uma aplicação pode ter os seguintes arquivos yaml, por exemplo:
App + Serviço + Ingress + ConfigMap + Secret (ConfigMap encriptado)

Ao atualizar algum desses arquivos, seria necessário, manualmente, executar o kubectl apply -f <arquivo.yaml>.

Com o HELM é possível fazer gerenciamento de pacotes para entregar aplicações no Kubernetes. 
Ele vai empacotar em CHARTS todas as as dependências da aplicação, como os volumes, ingress, configmaps, 
servicos e tudo que torna a aplicação completa.

Os 3 grandes conceitos:
CHART > RELEASE (versão) > REPOSITORIO (pode ou não ocorrer).