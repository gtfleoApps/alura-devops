+ Rodando Docker no WSL 2 sem Docker Desktop:
---------------------------------------------
https://www.youtube.com/watch?v=wpdcGgRY5kk
Git: https://github.com/codeedu/wsl2-docker-quickstart#docker-desktop-com-wsl2


+COMANDOS BASICOS:
------------------

Ativando/Desativando o Docker:
> sudo service docker start
> sudo service docker stopt

Lista de Containers Ativos:
> docker ps

Lista de Todos os Containers:
> docker ps -a

Lista apenas os IDs dos Containers:
> docker ps -q
> docker ps -a -q

Para o container executar algo:
> docker run ubuntu echo "Ola Mundo"

Fazer com que o terminal da máquina seja integrado ao terminal de dentro do container:
> docker run -it ubuntu

Executando novamente um container:
> docker start 05025384675e (id vindo do docker ps -a)
> docker stop 05025384675e

Parando um container imediatamente:
> docker stop -t 0 05025384675e

Executando novamente um container e integrando ao terminal:
> docker start -a -i 05025384675e

Removendo um container:
> docker rm c9f83bfb82a8

Removendo todos os containers inativos:
> docker container prune

Listando imagens:
> docker images

Removendo imagens:
> docker rmi nome-container

Executando um container em background (sem travar o terminal) com detached:
> docker run -d nome-container

Como linkar uma porta do container a uma porta do computador:
> docker run -d -P nome-container

Para visualizar as portas que estão sendo utilizadas:
> docker port container-id

Nomeando um container:
> docker run -d -P --name meu-site dockersamples/static-site

Definindo uma porta especifica (-p porta-computador:porta-container):
> docker run -d -p 12345:80 dockersamples/static-site

Atribuindo uma variavel de ambiente:
> docker run -d -P -e AUTHOR="Leonardo Guerra" dockersamples/static-site

Parando todos os containers de uma só vez (passando como parametro os Ids dos containers ativos):
> docker stop $(docker ps -q)
> docker stop -t 0 $(docker ps -q)

+ USANDO VOLUMES:
----------------
Criando uma pasta no Docker Host (um volume "/var/www") para não perder os dados da camada de escritaao de um container removido:
> docker run -v "/var/www" nome-da-imagem

Descobrindo a pasta no docker host que o volume faz referência (Mount.Source):
> docker inspect id-container

Especificando o caminho do volume no docker host (diretorio-computador:diretorio-container):
> entre na pasta pelo terminal > pwd > copie o resultado
> docker run -v "resultado-pwd:/var/www" nome-da-imagem 


+ RODANDO CÓDIGO (node.js) EM UM CONTAINER:
-------------------------------------------
Criando container a partir de uma imagem oficial do node:
> docker run node

Criando um volume que faça referência à pasta do código:
> docker run -v "/mnt/d/Developer/Cursos/Alura/02_DevOps/04-Docker/volume-exemplo:/var/www" node

Iniciando o servidor, executando o comando npm start:
> docker run -v "/mnt/d/Developer/Cursos/Alura/02_DevOps/04-Docker/volume-exemplo:/var/www" node npm start

Linkando a porta 3000 do servidor no docker à porta do nosso computador, no caso a 8080:
> docker run -p 8080:3000 -v "/mnt/d/Developer/Cursos/Alura/02_DevOps/04-Docker/volume-exemplo:/var/www" node npm start

Em caso de erro, onde é ncessário informar onde rodar onde rodar o comando npm start (-w):
> docker run -p 8080:3000 -v "/mnt/d/Developer/Cursos/Alura/02_DevOps/04-Docker/volume-exemplo:/var/www" -w "/var/www" node npm start

Iniciar o servidor sem travar o terminal (Esse seria o comando final p/ geração do container com todas as configurações do exemplo!!!):
> docker run -d -p 8080:3000 -v "/mnt/d/Developer/Cursos/Alura/02_DevOps/04-Docker/volume-exemplo:/var/www" -w "/var/www" node npm start

Caso queira iniciar dentro do diretório onde está o projeto, o comando pode ficar assim (usando pwd):
> docker run -d -p 8080:3000 -v "$(pwd):/var/www" -w "/var/www" node npm start

Para executar o bash dentro de um container em execução:
> docker exec -it id-container bash


+ CONSTRUINDO IMAGENS:
----------------------

Comece criando um arquivo Dockerfile no seu projeto:
> Dockerfile (quando só há um no projeto) ou nomeQualquer.dockerfile

Exclua as dependências já estão instaladas no projeto (elas serão instaladas na montagem do container):
> node_modules (remova essa pasta)

- Dentro do dockerfile:
Baseando de uma outra imagem:
> FROM node:latest

Responsável:
> MAINTAINER Nome da Pessoa

Setando variaveis de ambiente:
> ENV NODE_ENV=production
  ENV PORT=3000

Movendo todo o código da aplicação para uma pasta específica do container:
> COPY . /var/www

Definindo a pasta de onde se deve executar os comandos do container carregado:
> WORKDIR /var/www

Instalando as dependências:
> RUN npm install

Comando executado assim que carregar o container:
> ENTRYPOINT npm start (ou no formato json: ["npm", "start"])

Definindo a porta (3000 por exemplo):
> EXPOSE 3000

O Dockerfile então ficou:
FROM node:latest
MAINTAINER Leonardo Guerra
ENV NODE_ENV=production
ENV PORT=3000
COPY . /var/www
WORKDIR /var/www
RUN npm install
ENTRYPOINT ["npm", "start"]
EXPOSE $PORT

Fazendo o build da imagem a partir do arquivo (-f), definindo usuario/nome da imagem (-t) e o contexto do arquivo (diretório, onde "." significa pasta atual do terminal):
> docker build -f Dockerfile -t leoguerra/node .

Verificando se a imagem existe:
> docker images

Teste criando um container a partir da imagem:
> docker run -d -p 8080:3000 leoguerra/node-alura

Disponibilize sua imagem no Docker Hub:
Crie uma conta no docker hub, depois faça o login pelo terminal
> docker login

Faça um push da sua imagem:
> docker push leoguerra/node-alura

Faça um teste e recupere a imagem do docker hub:
> docker pull leoguerra/node-alura


+ CRIANDO REDES NO DOCKER (para que os containers possam se comunicar usando o nome do container):
--------------------------------------------------------------------------------------------------

Criando uma rede nova (de nome minha-rede) no docker (com bridge driver):
> docker network create --driver bridge minha-rede

Para listar as redes do docker:
> docker network ls

Criando dois containers dentro de minha-rede:
> docker run -it --name meu-container-ubuntu-1 --network minha-rede ubuntu
> docker run -it --name meu-container-ubuntu-2 --network minha-rede ubuntu

Pode inspecionar os containers para verificar a rede:
> docker inspect id-container

Criando containers mongodb e de uma aplicação de testes, dentro da mesma rede:
> docker run -d --name meu-mongo --network minha-rede mongo
> docker run --network minha-rede -d -p 8080:3000 douglasq/alura-books:cap05

Para inspecionar a rede e os containers que estão nela:
> docker network inspect minha-rede

Para consultar os documentos no container meu-mongo:
> docker exec -it meu-mongo bash
> mongo
> show dbs
ou
> docker exec -it meu-mongo mongo
> show dbs

Para fazer um ping entre containers:
> docker exec -it nome-container1 ping nome-container2


+ DOCKER COMPOSE - SUBINDO MÚLTIPLOS CONTAINERS:
------------------------------------------------

Crie um arquivo yaml na raiz do projeto (parece um json, mas tabulado):
> docker-compose.yml

No arquivo docker-compose.yml:
>
version: '3' 							// Versão do docker-compose
services: 							// Serviços (containers) da aplicação
	nginx:							// Nome do serviço
		build:						// Parametros para build de um dos serviços
			dockerfile: ./docker/nginx.dockerfile 	// Onde está o dockerfile a ser utilizado
			context: . 				// Pasta atual onde se encontra o yml
		image: douglasq/nginx				// Nome da imagem 
		container_name: nginx				// Nome que será dado ao container no docker
		ports:						// Mapeamento de Portas utilizadas
			- "80:80"				// porta-host:porta-container
		networks:					// Rede do container
			- production-network			// Nome da rede
		depends_on:					// Cria uma ordem para os builds
			- "node1"				// Obs: "-" indica propriedade com array de itens
			- "node2"
			- "node3"

	mongodb:						// Esse serviço foi criado sem build de dockerfile
		image: mongo					// Imagem padrao do mongo no docker hub
		networks:					// Rede do container
			- production-network

	node1:
		build:
			dockerfile: ./docker/alura-books.dockerfile
			context: .
		image: douglasq/alura-books
		container_name: alura-books1
		ports:
			- "3000"				// Exposição de porta 3000
		networks:
			- production-network
		depends_on:					// Cria uma ordem para os builds
			- "mongodb"

	node2:
		build:
			dockerfile: ./docker/alura-books.dockerfile
			context: .
		image: douglasq/alura-books
		container_name: alura-books2
		ports:
			- "3000"
		networks:
			- production-network
		depends_on:
			- "mongodb"

	node3:
		build:
			dockerfile: ./docker/alura-books.dockerfile
			context: .
		image: douglasq/alura-books
		container_name: alura-books3
		ports:
			- "3000"
		networks:
			- production-network
		depends_on:
			- "mongodb"

networks:							// Cria a Rede a ser usada pelos serviços/containers
	production-network:					// Nome que foi dados à rede
		driver: bridge					// Driver usado para criação da rede
<


Instalando o Docker Compose na versão mais atual:
> sudo curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

Dando permissão de execução ao docker-compose:
> sudo chmod +x /usr/local/bin/docker-compose

Fazendo o build das imagens (douglasq/nginx e douglasq/alura-books), executando o comando na pasta do projeto:
> docker-compose build

Criando os serviços a partir do arquivo yml:
> docker-compose up

Criando os serviços a partir do arquivo yml, liberando o terminal:
> docker-compose up -d

Visualizando os serviços contidos no arquivo yml:
> docker-compose ps

Parando e removendo os containers contidos no arquivo yml:
> docker-compose down

Visualizando o help:
docker-compose --help